version: 0.1
component: build
timeoutInSeconds: 6000
failImmediatelyOnError: true
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
    ARTIFACT_FILE_NAME: "exec-app"
  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  vaultVariables:
    ARTIFACT_REPO_OCID_FromVault: ocid1.vaultsecret.oc1.iad.amaaaaaaz2fdaxqaqrxjimixp3adkjvjfz2udbv4segyhzhlbyhzo5dzovcq

  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  exportedVariables:
    - BUILDRUN_HASH
    - ARTIFACT_NAME
    - ARTIFACT_REPO_OCID


steps:
  - type: Command
    name: "Export variables"
    timeoutInSeconds: 140
    command: |
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH
      export ARTIFACT_REPO_OCID=${ARTIFACT_REPO_OCID_FromVault}
      export ARTIFACT_NAME=${ARTIFACT_FILE_NAME}
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root

  - type: Command
    timeoutInSeconds: 600
    name: "Install NVM"
    command: |
      cd ${OCI_WORKSPACE_DIR}
      # install nvm
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      yum -y nvm install v20.11.1
      echo "NODE VERSION: ${node -v}"
      echo "NPM VERSION: ${npm -v}"

    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root
  
  - type: Command
    timeoutInSeconds: 600
    name: "NPM install"
    command: |
      cd ${OCI_WORKSPACE_DIR}
      npm install
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 600
    name: "Install PKG"
    command: |
      cd ${OCI_WORKSPACE_DIR}
      npm i -g pkg
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 600
    name: "NPM build"
    command: |
      cd ${OCI_WORKSPACE_DIR}
      npm run build
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 1200
    name: "Run Tests"
    command: |
      cd ${OCI_WORKSPACE_DIR}
      npm test
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 1200
    name: "Build a native executable"
    command: |
      cd ${OCI_WORKSPACE_DIR}
      pkg server.js --target latest-linux-arm64
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 80
        runAs: root

outputArtifacts:
  - name: app_native_executable
    type: BINARY
    location: ${OCI_WORKSPACE_DIR}/server

  - name: deployment_spec
    type: BINARY
    location: instance_deployment_spec.yaml