name: Build

on:
  push:
    branches: [ "action-build" ]
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up OCI CLI
          run: |
            python3 -m pip install --user oci-cli
            echo $(oci -v)
    
        - name: Configure OCI CLI
          run: |
            mkdir ~/.oci
            echo "[DEFAULT]" >> ~/.oci/config
            echo "user=${{secrets.OCI_USER}}" >> ~/.oci/config
            echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
            echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/config
            echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
            echo "tenancy=${{secrets.OCI_TENANCY}}" >> ~/.oci/config
            echo "key_file=~/.oci/key.pem" >> ~/.oci/config
            echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
            oci setup repair-file-permissions --file /home/runner/.oci/config
            oci setup repair-file-permissions --file /home/runner/.oci/key.pem

        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
              # the node version for the setup-node action
            node-version: 16.x
        - run: |
            npm ci
            npm run build
        
        - name: PKG Install
          run: | 
            npm i -g pkg

        - name: Build Executable
          run: |
            pkg server.js --target node16-linux-arm64 
        
        - name: Push Executable to Artifact Registry 
          id: create-artifact 
          env:
            CLI_AUTH: api_key
            CLI_USER: ${{ secrets.OCI_USER }}
            CLI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
            OCI_CLI_KEY_FILE: ~/.oci/key.pem
            CLI_TENANCY: ${{ secrets.OCI_TENANCY }}
            CLI_REGION: ${{ secrets.OCI_REGION }}
            OCI_PASSPHRASE: ${{ secrets.OCI_PWD }} 
            AR_REPO_ID: ${{ secrets.AR_REPO_ID }}
            DEVOPS_PROJECT_ID: ${{ secrets.DEVOPS_PROJECT_ID }} 
          run: |
            oci artifacts generic artifact upload-by-path --artifact-path server --content-body server --repository-id $AR_REPO_ID --artifact-version $GITHUB_SHA --config-file ~/.oci/config
            echo 'ARTIFACT_ID=${{ steps.create-artifact.outputs.id }}' >> '$GITHUB_ENV'


        - name: Create deployment spec in OCI DevOps 
          id: create-deployment-spec 
          env: 
            DEVOPS_PROJECT_ID: ${{ secrets.DEVOPS_PROJECT_ID }} 
            ARTIFACT_ID: ${{ env.ARTIFACT_ID }} 
            INSTANCE_GROUP_ID: ${{ secrets.INSTANCE_GROUP_ID}}
          run: | 
            cat <<EOF > instance_deployment_spec.yml 
            instanceConfiguration:  
            description: "Deployment specification for OCI instance group" 
            instanceGroupId: "$INSTANCE_GROUP_ID" 
            deploymentName: "Deploy Executable" 
            artifactSources: 
            - artifactType: "GENERIC_FILE" artifactId: "$ARTIFACT_ID" 
            lifecycle: 
            install: 
            - description: "Download and install the executable" 
              run: |
                echo "Downloading the executable..." 
                oci artifacts generic-artifact download --artifact-id "$ARTIFACT_ID" --file server \
                export OCI_CLI_AUTH=instance_principal
                sudo firewall-cmd --permanent --zone=public --add-service=http
                sudo firewall-cmd --permanent --zone=public --add-port=5000/tcp
                sudo firewall-cmd --permanent --zone=public --add-port=3000/tcp
                sudo systemctl restart firewalld
                chmod +x server 
            start: 
            - description: "Start the executable" 
              run: |
                echo "Starting the executable..." 
                ./server & 
            EOF 
            DEPLOYMENT_SPEC_ID=$(oci artifacts generic artifact upload-by-path --repository-id $AR_REPO_ID --display-name "InstanceDeploymentSpec" --artifact-path instance_deployment_spec.yml  --content-body instance_deployment_spec.yml --query 'data.id' --raw-output) 
            echo "DEPLOYMENT_SPEC_ID=$DEPLOYMENT_SPEC_ID" >> $GITHUB_ENV
            cat instance_deployment_spec.yml

        - name: Trigger OCI DevOps Pipeline
          env:
            DEVOPS_PROJECT_ID: ${{ secrets.DEVOPS_PROJECT_ID }}
            DEVOPS_PIPELINE_ID: ${{ secrets.DEVOPS_PIPELINE_ID }}
            ARTIFACT_ID: ${{ env.ARTIFACT_ID }} 
            DEPLOYMENT_SPEC_ID: ${{ env.DEPLOYMENT_SPEC_ID }} 
          run: |
            echo "Triggering OCI DevOps Pipeline..."
            oci devops deployment create-pipeline-deployment \
            --pipeline-id $DEVOPS_PIPELINE_ID \
            --display-name "GitHub Actions Triggered Deployment" \
            --artifact-override-arguments '[{"artifact-id":"'$ARTIFACT_ID'", "artifact-source":{"source-type":"INLINE"} }]' \
            --deployment-arguements '[{"artifact-id":"'$DEPLOYMENT_SPEC_ID'", "artifact-source":{"source-type":"INLINE"}}]'
        

        - name: Cleanup
          run: |
            rm -rf ~/.oci/oci_api_key.pem

            

  
