name: Build

on:
  push:
    branches: [ "action-build" ]
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up OCI CLI
          run: |
            python3 -m pip install --user oci-cli
            echo $(oci -v)
    
        - name: Configure OCI CLI
          run: |
            mkdir ~/.oci
            echo "[DEFAULT]" >> ~/.oci/config
            echo "user=${{secrets.OCI_USER}}" >> ~/.oci/config
            echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
            echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/config
            echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
            echo "tenancy=${{secrets.OCI_TENANCY}}" >> ~/.oci/config
            echo "key_file=~/.oci/key.pem" >> ~/.oci/config
            echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
            oci setup repair-file-permissions --file /home/runner/.oci/config
            oci setup repair-file-permissions --file /home/runner/.oci/key.pem

        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
              # the node version for the setup-node action
            node-version: 16.x
        - run: |
            npm ci
            npm run build
        
        - name: Install 
          run: | 
            npm install -g json

        - name: Copy files to folder
          run: |
            mkdir downloads
            cp -r dist/ downloads/
            cp -r src/ downloads/
            cp -r node_modules downloads/
            cp app.js downloads/
            cp server.js downloads/
            cp package.json downloads/
            cp package-lock.json downloads/
            cp .proxyrc.json downloads/
            echo $(ls downloads)
            zip -r archive.zip downloads


        
        - name: Push App to Artifact Registry 
          id: create-artifact 
          env:
            CLI_AUTH: api_key
            CLI_USER: ${{ secrets.OCI_USER }}
            CLI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
            OCI_CLI_KEY_FILE: ~/.oci/key.pem
            CLI_TENANCY: ${{ secrets.OCI_TENANCY }}
            CLI_REGION: ${{ secrets.OCI_REGION }}
            OCI_PASSPHRASE: ${{ secrets.OCI_PWD }} 
            AR_REPO_ID: ${{ secrets.AR_REPO_ID }}
            DEVOPS_PROJECT_ID: ${{ secrets.DEVOPS_PROJECT_ID }} 
          run: |
            echo JSON_RESPONSE=$(oci artifacts generic artifact upload-by-path --artifact-path archive.zip --content-body archive.zip --repository-id $AR_REPO_ID --artifact-version $GITHUB_SHA --config-file ~/.oci/config) >> $GITHUB_OUTPUT
            

        - name: Get Artifact ID from JSON
          id: get-artifact-id
          env: 
              JSON_RESPONSE: ${{ steps.create-artifact.outputs.JSON_RESPONSE }}
          run: |
            JSON_ID=$( echo $JSON_RESPONSE | json data.id)
            echo "ARTIFACT_ID=$JSON_ID" >> $GITHUB_ENV
            

        - name: Create deployment spec inline 
          id: create-deployment-spec 
          env: 
            AR_REPO_ID: ${{ secrets.AR_REPO_ID }}
            DEVOPS_PROJECT_ID: ${{ secrets.DEVOPS_PROJECT_ID }} 
            ARTIFACT_ID: ${{ env.ARTIFACT_ID }} 
            INSTANCE_GROUP_ID: ${{ secrets.INSTANCE_GROUP_ID}}
          run: |
            
              cat > instance_deployment_spec.yaml <<-EOF
                version: 1.0
                component: deployment
                shell: bash
                env:
                  variables:
                    # Local variables
                    ARTIFACT_FILE_NAME: "server"
                  vaultVariables:
                    # Vault variables
                    ARTIFACT_REPO_OCID_FromVault: ocid1.vaultsecret.oc1.iad.amaaaaaaz2fdaxqaqrxjimixp3adkjvjfz2udbv4segyhzhlbyhzo5dzovcq

                steps:
                  # This section is to define the scripts that each step shall run on the instance after file copy.
                  - stepType: Command
                    name: Install OCI CLI
                    command: |
                      cd ~
                      python3 -m pip install --user oci-cli

                    timeoutInSeconds: 5000
                    shell: bash
                    onFailure:
                      - stepType: Command
                        name: "Failure Handling"
                        timeoutInSeconds: 1200
                        command: |
                          echo "Handled failure"
                  
                  - stepType: Command
                    name: Install Node
                    command: |
                      cd ~
                      sudo yum update
                      sudo yum install -y nodejs
                      node --version
                    
                    timeoutInSeconds: 600
                    shell: bash 
                    onFailure:
                      - stepType: Command
                        name: "Failure Handling"
                        timeoutInSeconds: 300
                        command: |
                          echo "Handling Failure"
                          echo "Failure successfully handled"

                  - stepType: Command
                    name: Replace Application Files
                    command: |
                      cd ~
                      sudo fuser -k 3000/tcp
                      export OCI_CLI_AUTH=instance_principal
                      export PATH=$PATH:~/.local/bin/
                      sudo systemctl disable firewalld
                      oci artifacts generic artifact download --artifact-id $ARTIFACT_ID --file archive.zip
                      unzip -o archive.zip

                    timeoutInSeconds: 5000
                    shell: bash
                    onFailure:
                      - stepType: Command
                        name: "Failure Handling"
                        timeoutInSeconds: 1200
                        command: |
                          echo "Failed Replacing Files"
                          echo "Handled failure"

                  - stepType: Command
                    name: Run the Application
                    command: |
                      cd ~
                      cd downloads
                      npm start &

                    timeoutInSeconds: 300
                    shell: bash
                    onFailure:
                      - stepType: Command
                        name: "Failure Handling"
                        timeoutInSeconds: 300
                        command: |
                          echo "Failed Running Application"
                          echo "Handled failure"
              EOF
            

        - name: Push deployment spec to OCI DevOps
          id: upload-deployment-spec
          env:
            AR_REPO_ID: ${{ secrets.AR_REPO_ID }}
          run: |
            echo UPLOAD_SPEC_RESPONSE=$(oci artifacts generic artifact upload-by-path --repository-id $AR_REPO_ID --artifact-version $GITHUB_SHA --artifact-path instance_deployment_spec.yaml  --content-body instance_deployment_spec.yaml --config-file ~/.oci/config) >> $GITHUB_OUTPUT

        - name: Get Deployment Spec ID from JSON
          id: get-deployment-spec-id
          env: 
              JSON_RESPONSE: ${{ steps.upload-deployment-spec.outputs.UPLOAD_SPEC_RESPONSE }}
          run: |
            JSON_ID=$( echo $JSON_RESPONSE | json data.id)
            echo "DEPLOYMENT_SPEC_ID=$JSON_ID" >> $GITHUB_ENV


        - name: Update DevOps Stage
          id: add-artifacts-to-pipeline
          env:
            CLI_AUTH: api_key
            OCI_CLI_KEY_FILE: ~/.oci/key.pem 
            DEPLOYMENT_SPEC_ID: ${{ env.DEPLOYMENT_SPEC_ID }}
            ARTIFACT_ID: ${{ env.ARTIFACT_ID }}
            DEPLOY_STAGE_ID: ${{ secrets.DEPLOY_STAGE_ID }}
          run: |
            echo y | oci devops deploy-stage update-deploy-compute-instance-group-stage --stage-id $DEPLOY_STAGE_ID --deployment-spec-artifact-id $DEPLOYMENT_SPEC_ID --artifact-ids ["$ARTIFACT_ID"]


        - name: Trigger OCI DevOps Pipeline
          env:
            DEVOPS_PROJECT_ID: ${{ secrets.DEVOPS_PROJECT_ID }}
            DEVOPS_PIPELINE_ID: ${{ secrets.DEVOPS_PIPELINE_ID }}
            DEPLOY_STAGE_ID: ${{ secrets.DEPLOY_STAGE_ID }}
          run: |
            echo "Triggering OCI DevOps Pipeline..."
            oci devops deployment create-single-stage-deployment \
            --pipeline-id $DEVOPS_PIPELINE_ID \
            --stage-id $DEPLOY_STAGE_ID 
        

        - name: Cleanup
          run: |
            rm -rf ~/.oci/oci_api_key.pem

            

  
